import { supabase } from "./supabase-client";
import { v4 as uuidv4 } from "uuid";

/**
 * Seeds mock data (device, usage logs, content rules, blocked attempts)
 * for a newly created child.
 */
export async function seedMockDataForChild(childId: string, childName: string) {
  console.log(`Seeding mock data for child ID: ${childId}`);
  try {
    // 1. Add a mock device
    const deviceUUID = uuidv4(); // Generate a UUID for the mock device primary key
    const { data: deviceData, error: deviceError } = await supabase
      .from("devices")
      .insert({
        id: deviceUUID,
        child_id: childId,
        // Use a simpler mock device_id for consistency
        device_id: `mock-device-${childId.substring(0, 6)}`,
        device_name: `${childName}'s Mock Device`,
        device_type: Math.random() > 0.5 ? "phone" : "tablet",
        os_type: Math.random() > 0.5 ? "android" : "ios",
        is_active: Math.random() > 0.3, // Higher chance of being active
        last_active: new Date(
          Date.now() - Math.random() * 1000 * 60 * 60 * 24 * 3 // Random time in last 3 days
        ).toISOString(),
      })
      .select("id") // Select the actual device UUID generated by DB
      .single();

    if (deviceError)
      throw new Error(`Failed to seed device: ${deviceError.message}`);
    if (!deviceData)
      throw new Error(`Failed to seed device: No data returned.`);

    const mockDeviceId = deviceData.id; // Use the inserted device's actual UUID
    console.log(`Seeded device ID: ${mockDeviceId}`);

    // 2. Add mock usage logs
    const usageLogs = [
      {
        child_id: childId,
        device_id: mockDeviceId,
        app_name: "YouTube",
        url: "youtube.com",
        category: "entertainment",
        duration: Math.floor(Math.random() * 3600) + 600, // 10-70 mins
        start_time: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(),
        end_time: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(),
      },
      {
        child_id: childId,
        device_id: mockDeviceId,
        app_name: "Roblox",
        url: null,
        category: "gaming",
        duration: Math.floor(Math.random() * 5400) + 1800, // 30-120 mins
        start_time: new Date(Date.now() - 1000 * 60 * 60 * 3).toISOString(),
        end_time: new Date(Date.now() - 1000 * 60 * 60 * 1).toISOString(),
      },
      {
        child_id: childId,
        device_id: mockDeviceId,
        app_name: "Chrome",
        url: "coolmathgames.com",
        category: "educational", // Debatable category :)
        duration: Math.floor(Math.random() * 1800) + 300, // 5-35 mins
        start_time: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
        // end_time: null, // Simulate still active
      },
    ];
    const { error: usageLogError } = await supabase
      .from("usage_logs")
      .insert(usageLogs);
    if (usageLogError)
      console.error("Failed to seed usage logs:", usageLogError.message);
    else console.log(`Seeded ${usageLogs.length} usage logs.`);

    // 3. Add mock content rules
    const contentRules = [
      {
        child_id: childId,
        category: "adult_content",
        is_blocked: true,
        rule_type: "category",
      },
      {
        child_id: childId,
        url: "unwanted-site.com",
        is_blocked: true,
        rule_type: "url",
      },
    ];
    const { error: ruleError } = await supabase
      .from("content_rules")
      .insert(contentRules);
    if (ruleError)
      console.error("Failed to seed content rules:", ruleError.message);
    else console.log(`Seeded ${contentRules.length} content rules.`);

    // 4. Add mock blocked attempts
    const blockedAttempts = [
      {
        child_id: childId,
        device_id: mockDeviceId,
        url: "unwanted-site.com",
        reason: "blocked_site",
      },
      {
        child_id: childId,
        device_id: mockDeviceId,
        app_name: "TikTok", // Blocked app attempt
        reason: "blocked_app", // Assuming this reason exists or can be added
      },
    ];
    const { error: blockedError } = await supabase
      .from("blocked_attempts")
      .insert(blockedAttempts);
    if (blockedError)
      console.error("Failed to seed blocked attempts:", blockedError.message);
    else console.log(`Seeded ${blockedAttempts.length} blocked attempts.`);
  } catch (error: any) {
    console.error("Error seeding mock data for child:", error.message);
  }
}
